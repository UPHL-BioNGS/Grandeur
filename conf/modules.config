process {

  withName: AMRFINDER {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: BAKTA {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: BLASTN {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: BLOBTOOLS_CREATE {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: BLOBTOOLS_VIEW {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: BLOBTOOLS_PLOT {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'blobtools/*.stats.txt'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'blobtools/*png'
      ]
    ]
  }
  withName: CIRCULOCOV {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'circulocov/*'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'circulocov/*/*'
      ]
    ]
  }
  // withName: DATASETS_SUMMARY {
  //   publishDir = [
  //     path: { "${params.outdir}" },
  //     mode: params.publish_dir_mode,
  //     saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
  //   ]
  // }
  withName: DATASETS_DOWNLOAD {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      pattern: "logs/*/*log"
    ]
  }
  withName: DRPRG {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'drprg/*/*'
      ]
    ]
  }
  withName: ELGATO {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: EMMTYPER {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: ENA_DOWNLOAD {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: FASTANI {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'fastani/*txt'
      ]
    ]
  }
  withName: FASTP {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: FASTQC {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: HEATCLUSTER {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: IQTREE2 {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: KAPTIVE {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: KLEBORATE {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "logs/*/*log"
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "kleborate/*/*output.txt"
      ]     
    ]
  }
  withName: KRAKEN2 {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: CORE_GENOME_EVALUATION {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'core_genome_evaluation/core_genome_evaluation.csv'
      ]
    ]
  }  
  //withName: JSON_CONVERT {
  //}

  //withName: MQC_PREP {
  //}

  //withName: NAMES {
  //}

  //withName: REFERENCES {
  //}
  
  withName: SPECIES {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: SUMMARY {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: MASH_SKETCH {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      pattern: "logs/*/*.log"
    ]
  }
  withName: MASH_DIST {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "logs/*/*.log"
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "mash/*.mashdist.txt"
      ]
    ]
  }
  withName: MASHTREE {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: MENINGOTYPE {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: MLST {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: MULTIQC {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: VERSIONS {
    publishDir = [
      path: { "${params.outdir}/summary" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: MYKROBE {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: PANAROO {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: PBPTYPER {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: PHYTREEVIZ {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: PLASMIDFINDER {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "logs/*/*log"
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "plasmidfinder/*/*"
      ]
    ]
  }
  withName: PROKKA {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: QUAST {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> (filename.equals('versions.yml') || filename.startsWith('quast/') && filename.endsWith('.tsv')) ? null : filename }
    ]
  }
  withName: ROARY {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: SEQSERO2 {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: SEROTYPEFINDER {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "logs/*/*log"
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: "serotypefinder/*/*"
      ]
    ]
  }
  withName: SHIGATYPER {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: SNPDISTS {
    publishDir = [
      path: { "${params.outdir}" },
      mode: params.publish_dir_mode,
      saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
  }
  withName: SPADES {
    publishDir = [
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'logs/*/*log'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'spades/*'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'spades/*/*'
      ],
      [
        path: { "${params.outdir}" },
        mode: params.publish_dir_mode,
        pattern: 'contigs/*'
      ]
    ]
  }
}